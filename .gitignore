import pandas as pd
import numpy as np
from datetime import datetime, time as t, timedelta
from kiteconnect import KiteConnect
from scipy.stats import norm
from scipy.optimize import brentq
from math import log, sqrt, exp
import logging
import time
import warnings

warnings.filterwarnings("ignore")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)




EXPIRY = '2025-02-13'  
EXPIRY_DT = datetime(2025, 2, 13, 15, 30, 0)
TRADING_START = t(9, 15)
TRADING_END = t(15, 30)
RISK_FREE_RATE = 0.068
DIVIDEND_YIELD = 0.012
TODAY = datetime.now().strftime('%Y-%m-%d')

instruments = pd.DataFrame(kite.instruments())
nifty_instrument = instruments[
    (instruments['exchange'] == 'NSE') & 
    (instruments['name'] == 'NIFTY 50') & 
    (instruments['segment'] == 'INDICES')
].iloc[0]
underlying_inst_id = nifty_instrument['instrument_token']

# Get NIFTY opening price at 9:15
nifty_data = kite.historical_data(
    instrument_token=underlying_inst_id, 
    from_date=TODAY, 
    to_date=TODAY, 
    interval="day"
)
open_price = nifty_data[0]['open']

# Black-Scholes Greeks formulae

def d1(S, K, T, r, q, sigma):
    """Calculate d1 for Black-Scholes."""
    return (log(S / K) + (r - q + sigma**2 / 2) * T) / (sigma * sqrt(T))

def d2(S, K, T, r, q, sigma):
    """Calculate d2 for Black-Scholes."""
    return d1(S, K, T, r, q, sigma) - sigma * sqrt(T)

def nd1(S, K, T, r, q, sigma):
    """Calculate N'(d1) - normal probability density function."""
    return norm.pdf(d1(S, K, T, r, q, sigma))

def Nd1(S, K, T, r, q, sigma):
    """Calculate N(d1) - cumulative distribution function."""
    return norm.cdf(d1(S, K, T, r, q, sigma))

def Nd2(S, K, T, r, q, sigma):
    """Calculate N(d2) - cumulative distribution function."""
    return norm.cdf(d2(S, K, T, r, q, sigma))

# Separate Greek Functions
def calculate_delta(S, K, T, r, q, sigma, option_type):
    """Calculate Delta for the option."""
    if option_type == 'call':
        return exp(-q * T) * Nd1(S, K, T, r, q, sigma)
    elif option_type == 'put':
        return exp(-q * T) * (Nd1(S, K, T, r, q, sigma) - 1)
    else:
        raise ValueError("Invalid option type. Use 'call' or 'put'.")

def calculate_theta(S, K, T, r, q, sigma, option_type):
    """Calculate Theta for the option (per day)."""
    d1_val = d1(S, K, T, r, q, sigma)
    d2_val = d2(S, K, T, r, q, sigma)
    nd1_val = nd1(S, K, T, r, q, sigma)
    Nd1_val = Nd1(S, K, T, r, q, sigma)
    Nd2_val = Nd2(S, K, T, r, q, sigma)

    if option_type == 'call':
        theta = (-S * exp(-q * T) * nd1_val * sigma / (2 * sqrt(T)) - 
                 r * K * exp(-r * T) * Nd2_val + 
                 q * S * exp(-q * T) * Nd1_val) / 365
    elif option_type == 'put':
        theta = (-S * exp(-q * T) * nd1_val * sigma / (2 * sqrt(T)) + 
                 r * K * exp(-r * T) * (1 - Nd2_val) - 
                 q * S * exp(-q * T) * (1 - Nd1_val)) / 365
    else:
        raise ValueError("Invalid option type. Use 'call' or 'put'.")
    return theta

def calculate_vega(S, K, T, r, q, sigma):
    """Calculate Vega for the option (per 1% change in volatility)."""
    return S * exp(-q * T) * nd1(S, K, T, r, q, sigma) * sqrt(T) * 0.01

def calculate_gamma(S, K, T, r, q, sigma):
    """Calculate Gamma for the option."""
    return exp(-q * T) * nd1(S, K, T, r, q, sigma) / (S * sigma * sqrt(T))

def calculate_vomma(S, K, T, r, q, sigma):
    """Calculate Vomma for the option."""
    d1_val = d1(S, K, T, r, q, sigma)
    d2_val = d2(S, K, T, r, q, sigma)
    vega = calculate_vega(S, K, T, r, q, sigma)
    return vega * d1_val * (d2_val / sigma)

# Black-Scholes Price and IV Calculation
def black_scholes_price(S, K, T, r, q, sigma, option_type):
    """Calculate Black-Scholes option price."""
    d1_val = d1(S, K, T, r, q, sigma)
    d2_val = d2(S, K, T, r, q, sigma)
    if option_type == 'call':
        return S * exp(-q * T) * norm.cdf(d1_val) - K * exp(-r * T) * norm.cdf(d2_val)
    elif option_type == 'put':
        return K * exp(-r * T) * norm.cdf(-d2_val) - S * exp(-q * T) * norm.cdf(-d1_val)
    else:
        raise ValueError("Invalid option type. Use 'call' or 'put'.")

def calculate_iv(option_price, S, K, T, r, q, option_type):
    """Calculate implied volatility using Brent's method."""
    option_func = lambda sigma: black_scholes_price(S, K, T, r, q, sigma, option_type) - option_price
    try:
        iv = brentq(option_func, 0.01, 2.0)
        return iv
    except ValueError:
        return None


def main():
    strike_range = [-450, -400, -350, -300, -250, -200, -150, -100, -50, 
                    0, 50, 100, 150, 200, 250, 300, 350, 400, 450]

    ce_tokens = {}
    pe_tokens = {}
    for strike_offset in strike_range:
        ce_instrum = instruments[
            (instruments['exchange'] == 'NFO') & 
            (instruments['name'] == 'NIFTY') & 
            (instruments['instrument_type'] == 'CE') & 
            (instruments['expiry'] == EXPIRY)
        ]
        pe_instrum = instruments[
            (instruments['exchange'] == 'NFO') & 
            (instruments['name'] == 'NIFTY') & 
            (instruments['instrument_type'] == 'PE') & 
            (instruments['expiry'] == EXPIRY)
        ]
        for strike in ce_instrum['strike'].unique():
            ce_tokens[strike] = int(ce_instrum[ce_instrum['strike'] == strike].iloc[0]['instrument_token'])
        for strike in pe_instrum['strike'].unique():
            pe_tokens[strike] = int(pe_instrum[pe_instrum['strike'] == strike].iloc[0]['instrument_token'])

    while True:
        now = datetime.now()
        current_time = t(now.hour, now.minute)
        if TRADING_START <= current_time <= TRADING_END and now.second == 0:
            try:
                # Fetch underlying price
                underlying_data = kite.historical_data(
                    instrument_token=underlying_inst_id, 
                    from_date=TODAY, 
                    to_date=now, 
                    interval="minute"
                )
                underlying_price = pd.DataFrame(underlying_data).iloc[-1]['close']
                atm_live = round(underlying_price / 50) * 50
                year_to_expiry = (EXPIRY_DT - now).total_seconds() / (365 * 24 * 60 * 60)

                # Calculate Greeks for CE and PE
                for strike_offset in strike_range:
                    strike = atm_live + strike_offset

                    # Call Option
                    if strike in ce_tokens:
                        ce_token = ce_tokens[strike]
                        ce_data = kite.historical_data(
                            instrument_token=ce_token, 
                            from_date=TODAY, 
                            to_date=now, 
                            interval="minute"
                        )
                        premium = pd.DataFrame(ce_data).iloc[-1]['close']
                        iv = calculate_iv(premium, underlying_price, strike, year_to_expiry, RISK_FREE_RATE, DIVIDEND_YIELD, 'call')
                        if iv:
                            delta = calculate_delta(underlying_price, strike, year_to_expiry, RISK_FREE_RATE, DIVIDEND_YIELD, iv, 'call')
                            theta = calculate_theta(underlying_price, strike, year_to_expiry, RISK_FREE_RATE, DIVIDEND_YIELD, iv, 'call')
                            vega = calculate_vega(underlying_price, strike, year_to_expiry, RISK_FREE_RATE, DIVIDEND_YIELD, iv)
                            gamma = calculate_gamma(underlying_price, strike, year_to_expiry, RISK_FREE_RATE, DIVIDEND_YIELD, iv)
                            vomma = calculate_vomma(underlying_price, strike, year_to_expiry, RISK_FREE_RATE, DIVIDEND_YIELD, iv)
                            logging.info(f"{now} - Strike {strike} CE: Delta={delta:.4f}, Theta={theta:.4f}, "
                                         f"Vega={vega:.4f}, Gamma={gamma:.4f}, Vomma={vomma:.4f}")

                    # Put Option
                    if strike in pe_tokens:
                        pe_token = pe_tokens[strike]
                        pe_data = kite.historical_data(
                            instrument_token=pe_token, 
                            from_date=TODAY, 
                            to_date=now, 
                            interval="minute"
                        )
                        premium = pd.DataFrame(pe_data).iloc[-1]['close']
                        iv = calculate_iv(premium, underlying_price, strike, year_to_expiry, RISK_FREE_RATE, DIVIDEND_YIELD, 'put')
                        if iv:
                            delta = calculate_delta(underlying_price, strike, year_to_expiry, RISK_FREE_RATE, DIVIDEND_YIELD, iv, 'put')
                            theta = calculate_theta(underlying_price, strike, year_to_expiry, RISK_FREE_RATE, DIVIDEND_YIELD, iv, 'put')
                            vega = calculate_vega(underlying_price, strike, year_to_expiry, RISK_FREE_RATE, DIVIDEND_YIELD, iv)
                            gamma = calculate_gamma(underlying_price, strike, year_to_expiry, RISK_FREE_RATE, DIVIDEND_YIELD, iv)
                            vomma = calculate_vomma(underlying_price, strike, year_to_expiry, RISK_FREE_RATE, DIVIDEND_YIELD, iv)
                            logging.info(f"{now} - Strike {strike} PE: Delta={delta:.4f}, Theta={theta:.4f}, "
                                         f"Vega={vega:.4f}, Gamma={gamma:.4f}, Vomma={vomma:.4f}")

            except Exception as e:
                logging.error(f"Error in main loop: {str(e)}")

        time.sleep(0.1)

if __name__ == "__main__":
    main()
